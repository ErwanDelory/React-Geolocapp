{"ast":null,"code":"var _jsxFileName = \"/Users/erwandelory/Documents/Semestre_9/Cloud Computing/projetcloud2front/src/pages/test.jsx\";\nimport React, { Component } from 'react';\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport { ReactLeafletSearch } from 'react-leaflet-search';\n\nclass CustomOpenStreetMap {\n  constructor(options = {\n    providerKey: null,\n    searchBounds: []\n  }) {\n    let {\n      searchBounds\n    } = options; //Bounds are expected to be a nested array of [[sw_lat, sw_lng],[ne_lat, ne_lng]].\n    // We convert them into a string of 'x1,y1,x2,y2' which is the opposite way around from lat/lng - it's lng/lat\n\n    let boundsUrlComponent = '';\n    let regionUrlComponent = '';\n\n    if (searchBounds.length) {\n      const reversed = searchBounds.map(el => {\n        return el.reverse();\n      });\n      this.bounds = [].concat([], ...reversed).join(',');\n      boundsUrlComponent = `&bounded=1&viewbox=${this.bounds}`;\n    }\n\n    if ('region' in options) {\n      regionUrlComponent = `&countrycodes=${options.region}`;\n    }\n\n    this.url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&polygon_svg=1&namedetails=1${boundsUrlComponent}${regionUrlComponent}&q=`;\n  }\n\n  async search(query) {\n    // console.log(this.url + query)\n    const response = await fetch(this.url + query).then(res => res.json());\n    return this.formatResponse(response);\n  }\n\n  formatResponse(response) {\n    const resources = response;\n    const count = response.length;\n    const info = count > 0 ? resources.map(e => ({\n      bounds: e.boundingbox.map(bound => Number(bound)),\n      latitude: 0,\n      longitude: 0,\n      name: 'deneme 1'\n    })) : 'Not Found';\n    return {\n      info: info,\n      raw: response\n    };\n  }\n\n}\n\nexport default class SimpleExample extends Component {\n  constructor(props) {\n    super(props);\n    this.provider = new CustomOpenStreetMap();\n    this.state = {\n      count: 0,\n      maxZoom: 20,\n      bounds: [{\n        lat: 0,\n        lng: 0\n      }]\n    };\n  }\n\n  render() {\n    const ReactLeafletSearchComponent = withLeaflet(ReactLeafletSearch);\n    return /*#__PURE__*/React.createElement(Map, {\n      className: \"simpleMap\",\n      scrollWheelZoom: true,\n      bounds: this.state.bounds,\n      maxZoom: this.state.maxZoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      noWrap: true,\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ReactLeafletSearchComponent, {\n      customProvider: this.provider,\n      inputPlaceholder: \"Custom placeholder\",\n      search: [43.296482, 5.36978],\n      showMarker: true,\n      zoom: 13,\n      showPopup: true,\n      closeResultsOnClick: true,\n      openSearchOnLoad: false // providerOptions={{region: 'tr'}}\n      // default provider OpenStreetMap\n      // provider=\"BingMap\"\n      // providerKey=\"AhkdlcKxeOnNCJ1wRIPmrOXLxtEHDvuWUZhiT4GYfWgfxLthOYXs5lUMqWjQmc27\"\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/erwandelory/Documents/Semestre_9/Cloud Computing/projetcloud2front/src/pages/test.jsx"],"names":["React","Component","Map","TileLayer","withLeaflet","ReactLeafletSearch","CustomOpenStreetMap","constructor","options","providerKey","searchBounds","boundsUrlComponent","regionUrlComponent","length","reversed","map","el","reverse","bounds","concat","join","region","url","search","query","response","fetch","then","res","json","formatResponse","resources","count","info","e","boundingbox","bound","Number","latitude","longitude","name","raw","SimpleExample","props","provider","state","maxZoom","lat","lng","render","ReactLeafletSearchComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Map, TileLayer, withLeaflet } from 'react-leaflet';\nimport { ReactLeafletSearch } from 'react-leaflet-search';\n\nclass CustomOpenStreetMap {\n  constructor(options = { providerKey: null, searchBounds: [] }) {\n    let { searchBounds } = options;\n    //Bounds are expected to be a nested array of [[sw_lat, sw_lng],[ne_lat, ne_lng]].\n    // We convert them into a string of 'x1,y1,x2,y2' which is the opposite way around from lat/lng - it's lng/lat\n    let boundsUrlComponent = '';\n    let regionUrlComponent = '';\n    if (searchBounds.length) {\n      const reversed = searchBounds.map((el) => {\n        return el.reverse();\n      });\n      this.bounds = [].concat([], ...reversed).join(',');\n      boundsUrlComponent = `&bounded=1&viewbox=${this.bounds}`;\n    }\n    if ('region' in options) {\n      regionUrlComponent = `&countrycodes=${options.region}`;\n    }\n    this.url = `https://nominatim.openstreetmap.org/search?format=json&addressdetails=1&polygon_svg=1&namedetails=1${boundsUrlComponent}${regionUrlComponent}&q=`;\n  }\n\n  async search(query) {\n    // console.log(this.url + query)\n    const response = await fetch(this.url + query).then((res) => res.json());\n    return this.formatResponse(response);\n  }\n\n  formatResponse(response) {\n    const resources = response;\n    const count = response.length;\n    const info =\n      count > 0\n        ? resources.map((e) => ({\n            bounds: e.boundingbox.map((bound) => Number(bound)),\n            latitude: 0,\n            longitude: 0,\n            name: 'deneme 1',\n          }))\n        : 'Not Found';\n    return {\n      info: info,\n      raw: response,\n    };\n  }\n}\n\nexport default class SimpleExample extends Component {\n  constructor(props) {\n    super(props);\n    this.provider = new CustomOpenStreetMap();\n    this.state = {\n      count: 0,\n      maxZoom: 20,\n      bounds: [\n        {\n          lat: 0,\n          lng: 0,\n        },\n      ],\n    };\n  }\n\n  render() {\n    const ReactLeafletSearchComponent = withLeaflet(ReactLeafletSearch);\n\n    return (\n      <Map\n        className=\"simpleMap\"\n        scrollWheelZoom={true}\n        bounds={this.state.bounds}\n        maxZoom={this.state.maxZoom}\n      >\n        <TileLayer\n          noWrap={true}\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <ReactLeafletSearchComponent\n          customProvider={this.provider}\n          inputPlaceholder=\"Custom placeholder\"\n          search={[43.296482, 5.36978]}\n          showMarker={true}\n          zoom={13}\n          showPopup={true}\n          closeResultsOnClick={true}\n          openSearchOnLoad={false}\n\n          // providerOptions={{region: 'tr'}}\n\n          // default provider OpenStreetMap\n          // provider=\"BingMap\"\n          // providerKey=\"AhkdlcKxeOnNCJ1wRIPmrOXLxtEHDvuWUZhiT4GYfWgfxLthOYXs5lUMqWjQmc27\"\n        />\n      </Map>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}